/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as MarkupAI from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";

export declare namespace StyleGuides {
    export interface Options {
        environment?: core.Supplier<environments.MarkupAIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

/**
 * Endpoints related to creating, updating, and organizing style guides for content consistency across teams.
 */
export class StyleGuides {
    protected readonly _options: StyleGuides.Options;

    constructor(_options: StyleGuides.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all style guides associated with your organization.
     *
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MarkupAI.UnauthorizedError}
     * @throws {@link MarkupAI.ForbiddenError}
     * @throws {@link MarkupAI.UnprocessableEntityError}
     * @throws {@link MarkupAI.InternalServerError}
     *
     * @example
     *     await client.styleGuides.listStyleGuides()
     */
    public listStyleGuides(
        requestOptions?: StyleGuides.RequestOptions,
    ): core.HttpResponsePromise<MarkupAI.StyleGuideResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__listStyleGuides(requestOptions));
    }

    private async __listStyleGuides(
        requestOptions?: StyleGuides.RequestOptions,
    ): Promise<core.WithRawResponse<MarkupAI.StyleGuideResponse[]>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MarkupAIEnvironment.Default,
                "v1/style-guides",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as MarkupAI.StyleGuideResponse[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new MarkupAI.UnauthorizedError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new MarkupAI.ForbiddenError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new MarkupAI.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new MarkupAI.InternalServerError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MarkupAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MarkupAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MarkupAITimeoutError("Timeout exceeded when calling GET /v1/style-guides.");
            case "unknown":
                throw new errors.MarkupAIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new style guide that can be used in checks, suggestions, and rewrites.
     *
     * @param {MarkupAI.StyleGuideRequestBody} request
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MarkupAI.UnauthorizedError}
     * @throws {@link MarkupAI.ForbiddenError}
     * @throws {@link MarkupAI.ContentTooLargeError}
     * @throws {@link MarkupAI.UnprocessableEntityError}
     * @throws {@link MarkupAI.InternalServerError}
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.styleGuides.createStyleGuide({
     *         file_upload: fs.createReadStream("/path/to/your/file"),
     *         name: "name"
     *     })
     */
    public createStyleGuide(
        request: MarkupAI.StyleGuideRequestBody,
        requestOptions?: StyleGuides.RequestOptions,
    ): core.HttpResponsePromise<MarkupAI.StyleGuideResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createStyleGuide(request, requestOptions));
    }

    private async __createStyleGuide(
        request: MarkupAI.StyleGuideRequestBody,
        requestOptions?: StyleGuides.RequestOptions,
    ): Promise<core.WithRawResponse<MarkupAI.StyleGuideResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("file_upload", request.file_upload);
        _request.append("name", request.name);
        const _maybeEncodedRequest = await _request.getRequest();
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                ..._maybeEncodedRequest.headers,
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MarkupAIEnvironment.Default,
                "v1/style-guides",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as MarkupAI.StyleGuideResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new MarkupAI.UnauthorizedError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new MarkupAI.ForbiddenError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 413:
                    throw new MarkupAI.ContentTooLargeError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new MarkupAI.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new MarkupAI.InternalServerError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MarkupAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MarkupAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MarkupAITimeoutError("Timeout exceeded when calling POST /v1/style-guides.");
            case "unknown":
                throw new errors.MarkupAIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific style guide by ID, including its metadata such as `name` and `status`.
     *
     * @param {string} styleGuideId - The ID of the style guide.
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MarkupAI.UnauthorizedError}
     * @throws {@link MarkupAI.ForbiddenError}
     * @throws {@link MarkupAI.NotFoundError}
     * @throws {@link MarkupAI.UnprocessableEntityError}
     * @throws {@link MarkupAI.InternalServerError}
     *
     * @example
     *     await client.styleGuides.getStyleGuide("style_guide_id")
     */
    public getStyleGuide(
        styleGuideId: string,
        requestOptions?: StyleGuides.RequestOptions,
    ): core.HttpResponsePromise<MarkupAI.StyleGuideResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStyleGuide(styleGuideId, requestOptions));
    }

    private async __getStyleGuide(
        styleGuideId: string,
        requestOptions?: StyleGuides.RequestOptions,
    ): Promise<core.WithRawResponse<MarkupAI.StyleGuideResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MarkupAIEnvironment.Default,
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as MarkupAI.StyleGuideResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new MarkupAI.UnauthorizedError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new MarkupAI.ForbiddenError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 404:
                    throw new MarkupAI.NotFoundError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new MarkupAI.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new MarkupAI.InternalServerError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MarkupAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MarkupAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MarkupAITimeoutError(
                    "Timeout exceeded when calling GET /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.MarkupAIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a style guide by ID.
     *
     * @param {string} styleGuideId - The ID of the style guide.
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MarkupAI.UnauthorizedError}
     * @throws {@link MarkupAI.ForbiddenError}
     * @throws {@link MarkupAI.NotFoundError}
     * @throws {@link MarkupAI.UnprocessableEntityError}
     * @throws {@link MarkupAI.InternalServerError}
     *
     * @example
     *     await client.styleGuides.deleteStyleGuide("style_guide_id")
     */
    public deleteStyleGuide(
        styleGuideId: string,
        requestOptions?: StyleGuides.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteStyleGuide(styleGuideId, requestOptions));
    }

    private async __deleteStyleGuide(
        styleGuideId: string,
        requestOptions?: StyleGuides.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MarkupAIEnvironment.Default,
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new MarkupAI.UnauthorizedError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new MarkupAI.ForbiddenError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 404:
                    throw new MarkupAI.NotFoundError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new MarkupAI.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new MarkupAI.InternalServerError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MarkupAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MarkupAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MarkupAITimeoutError(
                    "Timeout exceeded when calling DELETE /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.MarkupAIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update the name of an existing style guide.
     *
     * @param {string} styleGuideId - The ID of the style guide.
     * @param {MarkupAI.BodyUpdateStyleGuideV1StyleGuidesStyleGuideIdPatch} request
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MarkupAI.UnauthorizedError}
     * @throws {@link MarkupAI.ForbiddenError}
     * @throws {@link MarkupAI.NotFoundError}
     * @throws {@link MarkupAI.UnprocessableEntityError}
     * @throws {@link MarkupAI.InternalServerError}
     *
     * @example
     *     await client.styleGuides.updateStyleGuide("style_guide_id", {
     *         name: "name"
     *     })
     */
    public updateStyleGuide(
        styleGuideId: string,
        request: MarkupAI.BodyUpdateStyleGuideV1StyleGuidesStyleGuideIdPatch,
        requestOptions?: StyleGuides.RequestOptions,
    ): core.HttpResponsePromise<MarkupAI.StyleGuideResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateStyleGuide(styleGuideId, request, requestOptions));
    }

    private async __updateStyleGuide(
        styleGuideId: string,
        request: MarkupAI.BodyUpdateStyleGuideV1StyleGuidesStyleGuideIdPatch,
        requestOptions?: StyleGuides.RequestOptions,
    ): Promise<core.WithRawResponse<MarkupAI.StyleGuideResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MarkupAIEnvironment.Default,
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as MarkupAI.StyleGuideResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new MarkupAI.UnauthorizedError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 403:
                    throw new MarkupAI.ForbiddenError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 404:
                    throw new MarkupAI.NotFoundError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new MarkupAI.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new MarkupAI.InternalServerError(
                        _response.error.body as MarkupAI.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MarkupAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MarkupAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MarkupAITimeoutError(
                    "Timeout exceeded when calling PATCH /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.MarkupAIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
