/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MarkupAIClient } from "../../src/Client";
import * as MarkupAI from "../../src/api/index";

describe("StyleGuides", () => {
    test("listStyleGuides (26cc1160)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "Custom Marketing Guide",
                created_at: "2025-01-20T14:30:00Z",
                created_by: "user123",
                status: "completed",
                updated_at: "2024-01-15T09:30:00Z",
                updated_by: "updated_by",
                prompt: "This is the prompt generated for this style guide",
            },
            {
                id: "01971e03-dd27-75ee-9044-b48e654848cf",
                name: "AP",
                created_at: "2025-07-15T00:00:00Z",
                created_by: "markupai",
                status: "completed",
                updated_at: "2024-01-15T09:30:00Z",
                updated_by: "updated_by",
                prompt: "This is the prompt generated for this style guide",
            },
        ];
        server.mockEndpoint().get("/v1/style-guides").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.styleGuides.listStyleGuides();
        expect(response).toEqual([
            {
                id: "123e4567-e89b-12d3-a456-426614174000",
                name: "Custom Marketing Guide",
                created_at: "2025-01-20T14:30:00Z",
                created_by: "user123",
                status: "completed",
                updated_at: "2024-01-15T09:30:00Z",
                updated_by: "updated_by",
                prompt: "This is the prompt generated for this style guide",
            },
            {
                id: "01971e03-dd27-75ee-9044-b48e654848cf",
                name: "AP",
                created_at: "2025-07-15T00:00:00Z",
                created_by: "markupai",
                status: "completed",
                updated_at: "2024-01-15T09:30:00Z",
                updated_by: "updated_by",
                prompt: "This is the prompt generated for this style guide",
            },
        ]);
    });

    test("listStyleGuides (6dc5d08e)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server.mockEndpoint().get("/v1/style-guides").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.styleGuides.listStyleGuides();
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("listStyleGuides (ef061e32)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server.mockEndpoint().get("/v1/style-guides").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.styleGuides.listStyleGuides();
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("listStyleGuides (cfa10b2f)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/v1/style-guides").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.styleGuides.listStyleGuides();
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("listStyleGuides (da0ec732)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server.mockEndpoint().get("/v1/style-guides").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.styleGuides.listStyleGuides();
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleGuide (ba240600)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "123e4567-e89b-12d3-a456-426614174000",
            name: "Technical Documentation Guide",
            created_at: "2025-01-10T09:15:00Z",
            created_by: "user456",
            status: "completed",
            updated_at: "2024-01-15T09:30:00Z",
            updated_by: "updated_by",
            prompt: "This is the prompt generated for this style guide",
        };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleGuides.getStyleGuide("style_guide_id");
        expect(response).toEqual({
            id: "123e4567-e89b-12d3-a456-426614174000",
            name: "Technical Documentation Guide",
            created_at: "2025-01-10T09:15:00Z",
            created_by: "user456",
            status: "completed",
            updated_at: "2024-01-15T09:30:00Z",
            updated_by: "updated_by",
            prompt: "This is the prompt generated for this style guide",
        });
    });

    test("getStyleGuide (217b8477)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.getStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleGuide (d7481a43)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.getStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleGuide (15b18123)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.getStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.NotFoundError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleGuide (b739223e)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.getStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("getStyleGuide (a3dc0a73)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.getStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("deleteStyleGuide (2ac4ce4d)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/style-guides/style_guide_id").respondWith().statusCode(200).build();

        const response = await client.styleGuides.deleteStyleGuide("style_guide_id");
        expect(response).toEqual(undefined);
    });

    test("deleteStyleGuide (217b8477)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .delete("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.deleteStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("deleteStyleGuide (d7481a43)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .delete("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.deleteStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("deleteStyleGuide (15b18123)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .delete("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.deleteStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.NotFoundError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("deleteStyleGuide (b739223e)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.deleteStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("deleteStyleGuide (a3dc0a73)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .delete("/v1/style-guides/style_guide_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.deleteStyleGuide("style_guide_id");
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("updateStyleGuide (Style Guide Updated)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            name: "My Custom Style Guide",
            created_at: "2025-07-15T16:20:14Z",
            created_by: "37bb339a-d71e-4613-b3ea-8ddab41e9e7d",
            status: "running",
            updated_at: "2024-01-15T09:30:00Z",
            updated_by: "updated_by",
            prompt: "prompt",
        };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleGuides.updateStyleGuide("style_guide_id", {
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "My Custom Style Guide",
            created_at: "2025-07-15T16:20:14Z",
            created_by: "37bb339a-d71e-4613-b3ea-8ddab41e9e7d",
            status: "running",
            updated_at: "2024-01-15T09:30:00Z",
            updated_by: "updated_by",
            prompt: "prompt",
        });
    });

    test("updateStyleGuide (7521d579)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "x" };
        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.updateStyleGuide("style_guide_id", {
                name: "x",
            });
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("updateStyleGuide (cb60f495)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "x" };
        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.updateStyleGuide("style_guide_id", {
                name: "x",
            });
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("updateStyleGuide (1c837265)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "x" };
        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.updateStyleGuide("style_guide_id", {
                name: "x",
            });
        }).rejects.toThrow(
            new MarkupAI.NotFoundError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("updateStyleGuide (7febfaa0)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "x" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.updateStyleGuide("style_guide_id", {
                name: "x",
            });
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("updateStyleGuide (6834825)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "x" };
        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .patch("/v1/style-guides/style_guide_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleGuides.updateStyleGuide("style_guide_id", {
                name: "x",
            });
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });
});
