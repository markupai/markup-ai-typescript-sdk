/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MarkupAIClient } from "../../src/Client";
import * as MarkupAI from "../../src/api/index";

describe("StyleRewrites", () => {
    test("getStyleRewrite (Successful response)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "american_english",
                style_guide: { style_guide_type: "chicago", style_guide_id: "sg-7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e" },
                tone: "professional",
            },
            original: {
                issues: [
                    {
                        original: "recieve",
                        position: { start_index: 42 },
                        subcategory: "Grammar Agreement",
                        suggestion: "receive",
                        category: "grammar",
                    },
                    {
                        original: "data",
                        position: { start_index: 156 },
                        subcategory: "Grammar Agreement",
                        suggestion: "information",
                        category: "clarity",
                    },
                    {
                        original: "ok",
                        position: { start_index: 203 },
                        subcategory: "Grammar Agreement",
                        suggestion: "OK",
                        category: "consistency",
                    },
                ],
                scores: {
                    quality: {
                        score: 75,
                        grammar: { score: 85, issues: 2 },
                        consistency: { score: 70, issues: 3 },
                        terminology: { score: 95, issues: 1 },
                    },
                    analysis: {
                        clarity: {
                            score: 68,
                            flesch_reading_ease: 45.2,
                            sentence_complexity: 42.5,
                            vocabulary_complexity: 38.7,
                            sentence_count: 4,
                            word_count: 52,
                            average_sentence_length: 13,
                        },
                        tone: {
                            score: 72,
                            informality: 35.8,
                            liveliness: 28.4,
                            informality_alignment: 112.5,
                            liveliness_alignment: 94.3,
                        },
                    },
                },
            },
            rewrite: {
                text: "The updated document maintains clarity while following style guidelines. Information flows logically from introduction through supporting details. Technical terms are defined appropriately. The conclusion summarizes key points effectively.",
                scores: {
                    quality: {
                        score: 98,
                        grammar: { score: 100, issues: 0 },
                        consistency: { score: 95, issues: 1 },
                        terminology: { score: 100, issues: 0 },
                    },
                    analysis: {
                        clarity: {
                            score: 82,
                            flesch_reading_ease: 52.8,
                            sentence_complexity: 35.2,
                            vocabulary_complexity: 41.3,
                            sentence_count: 4,
                            word_count: 48,
                            average_sentence_length: 12,
                        },
                        tone: {
                            score: 88,
                            informality: 32.1,
                            liveliness: 30.6,
                            informality_alignment: 102.4,
                            liveliness_alignment: 98.7,
                        },
                    },
                },
            },
            workflow: {
                id: "rewrites-3fa85f64-5717-4562-b3fc-2c963f66afa6",
                api_version: "1.0.0",
                generated_at: "2025-01-15T15:12:45Z",
                status: "completed",
                type: "rewrites",
                webhook_response: { url: "https://api.example.com/webhook", status_code: 200 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleRewrites.getStyleRewrite("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "american_english",
                style_guide: {
                    style_guide_type: "chicago",
                    style_guide_id: "sg-7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e",
                },
                tone: "professional",
            },
            original: {
                issues: [
                    {
                        original: "recieve",
                        position: {
                            start_index: 42,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "receive",
                        category: "grammar",
                    },
                    {
                        original: "data",
                        position: {
                            start_index: 156,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "information",
                        category: "clarity",
                    },
                    {
                        original: "ok",
                        position: {
                            start_index: 203,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "OK",
                        category: "consistency",
                    },
                ],
                scores: {
                    quality: {
                        score: 75,
                        grammar: {
                            score: 85,
                            issues: 2,
                        },
                        consistency: {
                            score: 70,
                            issues: 3,
                        },
                        terminology: {
                            score: 95,
                            issues: 1,
                        },
                    },
                    analysis: {
                        clarity: {
                            score: 68,
                            flesch_reading_ease: 45.2,
                            sentence_complexity: 42.5,
                            vocabulary_complexity: 38.7,
                            sentence_count: 4,
                            word_count: 52,
                            average_sentence_length: 13,
                        },
                        tone: {
                            score: 72,
                            informality: 35.8,
                            liveliness: 28.4,
                            informality_alignment: 112.5,
                            liveliness_alignment: 94.3,
                        },
                    },
                },
            },
            rewrite: {
                text: "The updated document maintains clarity while following style guidelines. Information flows logically from introduction through supporting details. Technical terms are defined appropriately. The conclusion summarizes key points effectively.",
                scores: {
                    quality: {
                        score: 98,
                        grammar: {
                            score: 100,
                            issues: 0,
                        },
                        consistency: {
                            score: 95,
                            issues: 1,
                        },
                        terminology: {
                            score: 100,
                            issues: 0,
                        },
                    },
                    analysis: {
                        clarity: {
                            score: 82,
                            flesch_reading_ease: 52.8,
                            sentence_complexity: 35.2,
                            vocabulary_complexity: 41.3,
                            sentence_count: 4,
                            word_count: 48,
                            average_sentence_length: 12,
                        },
                        tone: {
                            score: 88,
                            informality: 32.1,
                            liveliness: 30.6,
                            informality_alignment: 102.4,
                            liveliness_alignment: 98.7,
                        },
                    },
                },
            },
            workflow: {
                id: "rewrites-3fa85f64-5717-4562-b3fc-2c963f66afa6",
                api_version: "1.0.0",
                generated_at: "2025-01-15T15:12:45Z",
                status: "completed",
                type: "rewrites",
                webhook_response: {
                    url: "https://api.example.com/webhook",
                    status_code: 200,
                },
            },
        });
    });

    test("getStyleRewrite (In progress)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "american_english",
                style_guide: { style_guide_type: "ap", style_guide_id: "style_guide_id" },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: { start_index: 356 },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            rewrite: { text: "text" },
            workflow: {
                id: "rewrites-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "running",
                type: "rewrites",
                webhook_response: { url: "url", status_code: 1 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleRewrites.getStyleRewrite("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "american_english",
                style_guide: {
                    style_guide_type: "ap",
                    style_guide_id: "style_guide_id",
                },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: {
                            start_index: 356,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            rewrite: {
                text: "text",
            },
            workflow: {
                id: "rewrites-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "running",
                type: "rewrites",
                webhook_response: {
                    url: "url",
                    status_code: 1,
                },
            },
        });
    });

    test("getStyleRewrite (Failed)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "american_english",
                style_guide: { style_guide_type: "ap", style_guide_id: "style_guide_id" },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: { start_index: 356 },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            rewrite: { text: "text" },
            workflow: {
                id: "rewrites-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "failed",
                type: "rewrites",
                webhook_response: { url: "url", status_code: 1 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleRewrites.getStyleRewrite("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "american_english",
                style_guide: {
                    style_guide_type: "ap",
                    style_guide_id: "style_guide_id",
                },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: {
                            start_index: 356,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            rewrite: {
                text: "text",
            },
            workflow: {
                id: "rewrites-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "failed",
                type: "rewrites",
                webhook_response: {
                    url: "url",
                    status_code: 1,
                },
            },
        });
    });

    test("getStyleRewrite (c373ec14)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleRewrites.getStyleRewrite("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleRewrite (ac5894f8)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleRewrites.getStyleRewrite("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleRewrite (76280fb0)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleRewrites.getStyleRewrite("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.NotFoundError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleRewrite (f1106515)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleRewrites.getStyleRewrite("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("getStyleRewrite (cd976c08)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/rewrites/workflow_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleRewrites.getStyleRewrite("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });
});
