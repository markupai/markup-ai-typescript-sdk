/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MarkupAIClient } from "../../src/Client";
import * as MarkupAI from "../../src/api/index";

describe("StyleSuggestions", () => {
    test("getStyleSuggestion (Successful response)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "british_english",
                style_guide: { style_guide_type: "ap", style_guide_id: "sg-9f2e3d4c-5a6b-7c8d-9e0f-1a2b3c4d5e6f" },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "recieve",
                        position: { start_index: 45 },
                        subcategory: "Grammar Agreement",
                        suggestion: "receive",
                        category: "grammar",
                    },
                    {
                        original: "utilize",
                        position: { start_index: 128 },
                        subcategory: "Grammar Agreement",
                        suggestion: "use",
                        category: "clarity",
                    },
                    {
                        original: "In order to",
                        position: { start_index: 256 },
                        subcategory: "Grammar Agreement",
                        suggestion: "To",
                        category: "clarity",
                    },
                    {
                        original: "e-mail",
                        position: { start_index: 342 },
                        subcategory: "Grammar Agreement",
                        suggestion: "email",
                        category: "consistency",
                    },
                    {
                        original: "OK",
                        position: { start_index: 412 },
                        subcategory: "Grammar Agreement",
                        suggestion: "okay",
                        category: "consistency",
                    },
                ],
                scores: {
                    quality: {
                        score: 65,
                        grammar: { score: 90, issues: 1 },
                        consistency: { score: 75, issues: 2 },
                        terminology: { score: 100, issues: 0 },
                    },
                    analysis: {
                        clarity: {
                            score: 58,
                            flesch_reading_ease: 48.3,
                            sentence_complexity: 45.2,
                            vocabulary_complexity: 52.8,
                            sentence_count: 5,
                            word_count: 87,
                            average_sentence_length: 17.4,
                        },
                        tone: {
                            score: 70,
                            informality: 42.5,
                            liveliness: 35.8,
                            informality_alignment: 125.6,
                            liveliness_alignment: 108.3,
                        },
                    },
                },
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2025-01-15T14:45:12Z",
                status: "completed",
                type: "suggestions",
                webhook_response: { url: "https://api.example.com/webhook", status_code: 200 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleSuggestions.getStyleSuggestion("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "british_english",
                style_guide: {
                    style_guide_type: "ap",
                    style_guide_id: "sg-9f2e3d4c-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "recieve",
                        position: {
                            start_index: 45,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "receive",
                        category: "grammar",
                    },
                    {
                        original: "utilize",
                        position: {
                            start_index: 128,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "use",
                        category: "clarity",
                    },
                    {
                        original: "In order to",
                        position: {
                            start_index: 256,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "To",
                        category: "clarity",
                    },
                    {
                        original: "e-mail",
                        position: {
                            start_index: 342,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "email",
                        category: "consistency",
                    },
                    {
                        original: "OK",
                        position: {
                            start_index: 412,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "okay",
                        category: "consistency",
                    },
                ],
                scores: {
                    quality: {
                        score: 65,
                        grammar: {
                            score: 90,
                            issues: 1,
                        },
                        consistency: {
                            score: 75,
                            issues: 2,
                        },
                        terminology: {
                            score: 100,
                            issues: 0,
                        },
                    },
                    analysis: {
                        clarity: {
                            score: 58,
                            flesch_reading_ease: 48.3,
                            sentence_complexity: 45.2,
                            vocabulary_complexity: 52.8,
                            sentence_count: 5,
                            word_count: 87,
                            average_sentence_length: 17.4,
                        },
                        tone: {
                            score: 70,
                            informality: 42.5,
                            liveliness: 35.8,
                            informality_alignment: 125.6,
                            liveliness_alignment: 108.3,
                        },
                    },
                },
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2025-01-15T14:45:12Z",
                status: "completed",
                type: "suggestions",
                webhook_response: {
                    url: "https://api.example.com/webhook",
                    status_code: 200,
                },
            },
        });
    });

    test("getStyleSuggestion (In progress)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "american_english",
                style_guide: { style_guide_type: "ap", style_guide_id: "style_guide_id" },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: { start_index: 356 },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "running",
                type: "suggestions",
                webhook_response: { url: "url", status_code: 1 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleSuggestions.getStyleSuggestion("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "american_english",
                style_guide: {
                    style_guide_type: "ap",
                    style_guide_id: "style_guide_id",
                },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: {
                            start_index: 356,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "running",
                type: "suggestions",
                webhook_response: {
                    url: "url",
                    status_code: 1,
                },
            },
        });
    });

    test("getStyleSuggestion (Failed)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            config: {
                dialect: "american_english",
                style_guide: { style_guide_type: "ap", style_guide_id: "style_guide_id" },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: { start_index: 356 },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "failed",
                type: "suggestions",
                webhook_response: { url: "url", status_code: 1 },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.styleSuggestions.getStyleSuggestion("workflow_id");
        expect(response).toEqual({
            config: {
                dialect: "american_english",
                style_guide: {
                    style_guide_type: "ap",
                    style_guide_id: "style_guide_id",
                },
                tone: "academic",
            },
            original: {
                issues: [
                    {
                        original: "faze",
                        position: {
                            start_index: 356,
                        },
                        subcategory: "Grammar Agreement",
                        suggestion: "phase",
                    },
                ],
            },
            workflow: {
                id: "suggestions-4a7c8e92-6f3d-4b8a-9c1e-2d5f7a9b3e4c",
                api_version: "1.0.0",
                generated_at: "2024-01-15T09:30:00Z",
                status: "failed",
                type: "suggestions",
                webhook_response: {
                    url: "url",
                    status_code: 1,
                },
            },
        });
    });

    test("getStyleSuggestion (c373ec14)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleSuggestions.getStyleSuggestion("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.UnauthorizedError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleSuggestion (ac5894f8)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleSuggestions.getStyleSuggestion("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.ForbiddenError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleSuggestion (76280fb0)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleSuggestions.getStyleSuggestion("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.NotFoundError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });

    test("getStyleSuggestion (f1106515)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleSuggestions.getStyleSuggestion("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.UnprocessableEntityError({
                key: "value",
            }),
        );
    });

    test("getStyleSuggestion (cd976c08)", async () => {
        const server = mockServerPool.createServer();
        const client = new MarkupAIClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: "detail", status: 1, request_id: "request_id" };
        server
            .mockEndpoint()
            .get("/v1/style/suggestions/workflow_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.styleSuggestions.getStyleSuggestion("workflow_id");
        }).rejects.toThrow(
            new MarkupAI.InternalServerError({
                detail: "detail",
                status: 1,
                request_id: "request_id",
            }),
        );
    });
});
